export interface DatabaseData {
    users: any[];
    clubs: any[];
    finances: any[];
    transactions: any[];
    flagCharges: any[];
    daily_expenses: any[];
    invitationCode: any[];
    feedbacks: any[];
    user_clubs: any[];
}
export declare class JsonServerService {
    private readonly logger;
    private readonly dbPath;
    private data;
    constructor();
    private loadDatabase;
    private saveDatabase;
    findAll(collection: keyof DatabaseData, query?: any): Promise<any[]>;
    findOne(collection: keyof DatabaseData, id: string | number): Promise<any>;
    findOneByField<T extends keyof DatabaseData>(collection: T, field: keyof DatabaseData[T][number], value: string | number): Promise<DatabaseData[T][number]>;
    create(collection: keyof DatabaseData, data: any): Promise<any>;
    update(collection: keyof DatabaseData, id: string | number, data: any): Promise<any>;
    delete(collection: keyof DatabaseData, id: string | number): Promise<void>;
    findByQuery(collection: keyof DatabaseData, query: any): Promise<any[]>;
    private filterItems;
    private generateId;
    private validateCreateData;
    getDatabaseStats(): Promise<any>;
    backupDatabase(): Promise<string>;
    restoreDatabase(backupPath: string): Promise<void>;
    getUsers(query?: any): Promise<any[]>;
    getUser(id: string | number): Promise<any>;
    getUserbyEmail(email: string): Promise<any>;
    createUser(data: any): Promise<any>;
    updateUser(id: string | number, data: any): Promise<any>;
    deleteUser(id: string | number): Promise<void>;
    getClubs(query?: any): Promise<any[]>;
    getClub(id: string | number): Promise<any>;
    createClub(data: any): Promise<any>;
    updateClub(id: string | number, data: any): Promise<any>;
    deleteClub(id: string | number): Promise<void>;
    getFinances(query?: any): Promise<any[]>;
    getFinance(id: string | number): Promise<any>;
    createFinance(data: any): Promise<any>;
    updateFinance(id: string | number, data: any): Promise<any>;
    deleteFinance(id: string | number): Promise<void>;
    getTransactions(query?: any): Promise<any[]>;
    getTransaction(id: string | number): Promise<any>;
    createTransaction(data: any): Promise<any>;
    updateTransaction(id: string | number, data: any): Promise<any>;
    deleteTransaction(id: string | number): Promise<void>;
    getFlagCharges(query?: any): Promise<any[]>;
    getFlagCharge(id: string | number): Promise<any>;
    createFlagCharge(data: any): Promise<any>;
    updateFlagCharge(id: string | number, data: any): Promise<any>;
    deleteFlagCharge(id: string | number): Promise<void>;
    getDailyExpenses(query?: any): Promise<any[]>;
    getDailyExpense(id: string | number): Promise<any>;
    createDailyExpense(data: any): Promise<any>;
    updateDailyExpense(id: string | number, data: any): Promise<any>;
    deleteDailyExpense(id: string | number): Promise<void>;
    getInvitationCodes(query?: any): Promise<any[]>;
    getInvitationCode(id: string | number): Promise<any>;
    createInvitationCode(data: any): Promise<any>;
    updateInvitationCode(id: string | number, data: any): Promise<any>;
    deleteInvitationCode(id: string | number): Promise<void>;
    getUserClubs(query?: any): Promise<any[]>;
    getUserClub(id: string | number): Promise<any>;
    createUserClub(data: any): Promise<any>;
    updateUserClub(id: string | number, data: any): Promise<any>;
    getClubsForUser(userId: string | number): Promise<any[]>;
    getClubsForParentMember(parentMemberId: string | number): Promise<any[]>;
    deleteUserClub(id: string | number): Promise<void>;
    getFeedbacks(query?: any): Promise<any[]>;
    getFeedback(id: string | number): Promise<any>;
    createFeedback(data: any): Promise<any>;
    updateFeedback(id: string | number, data: any): Promise<any>;
    deleteFeedback(id: string | number): Promise<void>;
}
